<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jam</title>
  <icon>https://rob2468.github.io/icon.png</icon>
  
  <link href="https://rob2468.github.io/atom.xml" rel="self"/>
  
  <link href="https://rob2468.github.io/"/>
  <updated>2025-10-07T17:26:37.191Z</updated>
  <id>https://rob2468.github.io/</id>
  
  <author>
    <name>陈军</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2025威海5天4晚旅游</title>
    <link href="https://rob2468.github.io/2025/10/07/travel-to-weihai/"/>
    <id>https://rob2468.github.io/2025/10/07/travel-to-weihai/</id>
    <published>2025-10-07T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.191Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;今年国庆有8天假期，很早规划带老婆孩子外出旅游。&lt;/p&gt;
&lt;p&gt;城市选择有点拍脑袋，我觉得去海边才有度假的感觉。首先考虑的是青岛，简单调研了下，没有留下什么记忆点（亮点）。然后看到了威海，给人的印象是有很长的海岸线，最后选了这里。&lt;/p&gt;</summary>
    
    
    
    
    <category term="生活" scheme="https://rob2468.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>技术方案选型指北</title>
    <link href="https://rob2468.github.io/2025/07/06/selection-of-technical-scheme/"/>
    <id>https://rob2468.github.io/2025/07/06/selection-of-technical-scheme/</id>
    <published>2025-07-06T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.191Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章的完整标题是：&lt;u&gt;多人研发&lt;/u&gt;的&lt;u&gt;前端工程团队&lt;/u&gt;如何做技术方案选型？&lt;/p&gt;
&lt;p&gt;我当前所在的前端团队有 7 名 Android 开发、8 名 iOS 开发、16 名 H5 开发（其中 1/3 是内包）。除了 Android/iOS 客户端研发之外，团队成员需要具备全栈开发的能力，研发涉及的系统有 Chair、Needle、Cube、H5。&lt;/p&gt;
&lt;p&gt;团队负责的业务场景众多，远超团队成员数量，再考虑人力资源、项目排期、风险等问题，不可能始终让一个人持续维护一个固定模块。&lt;/p&gt;
&lt;p&gt;作为一个前端工程团队，需要思考如何降低多人研发的复杂度，降低理解成本、开发成本、维护成本。&lt;/p&gt;</summary>
    
    
    
    
    <category term="思考" scheme="https://rob2468.github.io/tags/%E6%80%9D%E8%80%83/"/>
    
    <category term="设计模式" scheme="https://rob2468.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>文本处理 CSS 属性 - white-space/word-break/word-wrap</title>
    <link href="https://rob2468.github.io/2025/05/21/text-css/"/>
    <id>https://rob2468.github.io/2025/05/21/text-css/</id>
    <published>2025-05-21T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.191Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;CSS 处理文本的几个属性，理解起来比较相似。本文汇总在一起，帮助对比、理解、记忆。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CSS" scheme="https://rob2468.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>边框可拉伸的盒子</title>
    <link href="https://rob2468.github.io/2023/09/22/stretch-border-box/"/>
    <id>https://rob2468.github.io/2023/09/22/stretch-border-box/</id>
    <published>2023-09-22T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.191Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;前端开发中有时会遇到如下图所示的需求，即在一个不规则边框的容器中显示内容。本文讲述如何拆解这个需求，并通过 border-image CSS 属性实现。(下文讲解使用的原始图片是&lt;a href=&quot;https://mdn.alipayobjects.com/huamei_kmi0zi/afts/img/A*vLdFTYMEEzkAAAAAAAAAAAAADv17AQ/original&quot;&gt;这个&lt;/a&gt;。)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.githubusercontent.com/media/rob2468/rob2468.github.io/master/images/2023-09-22-%E7%A4%BA%E4%BE%8B.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="CSS" scheme="https://rob2468.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>复利与单利</title>
    <link href="https://rob2468.github.io/2023/09/05/compound-interest-simple-interest/"/>
    <id>https://rob2468.github.io/2023/09/05/compound-interest-simple-interest/</id>
    <published>2023-09-05T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.191Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;复利的英文翻译：compound interest&lt;/p&gt;
&lt;p&gt;单利的英文翻译：simple interest&lt;/p&gt;</summary>
    
    
    
    
    <category term="知识" scheme="https://rob2468.github.io/tags/%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>统计特定时间段的代码提交记录</title>
    <link href="https://rob2468.github.io/2023/09/01/git-log-commit-time/"/>
    <id>https://rob2468.github.io/2023/09/01/git-log-commit-time/</id>
    <published>2023-09-01T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.191Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;如果老板问你最近加班的情况是否严重，你如何回答？&lt;/p&gt;
&lt;p&gt;可以执行下面一段 Shell 脚本，自动统计特定时间段的代码提交记录。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Git" scheme="https://rob2468.github.io/tags/Git/"/>
    
    <category term="Shell" scheme="https://rob2468.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Monaco Editor</title>
    <link href="https://rob2468.github.io/2023/07/21/monaco-editor-practice/"/>
    <id>https://rob2468.github.io/2023/07/21/monaco-editor-practice/</id>
    <published>2023-07-21T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.191Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://microsoft.github.io/monaco-editor/&quot;&gt;Monaco&lt;/a&gt; 是一个代码编辑器，大名鼎鼎的 VS Code 便是基于 Monaco 实现。&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在公司里做了一个 PC 端应用，应用名 RPCUI，开发语言 Objective-C。可以在该应用中发起 RPC 调用，调试接口。&lt;/p&gt;
&lt;p&gt;RPCUI 实现了一个 JSON 编辑器，用于呈现 RPC 的输入和输出数据。这个编辑器实现原理很简单：使用 WKWebView 加载 Monaco，然后再将 webView 贴到原生视图上。&lt;/p&gt;
&lt;p&gt;本文介绍 Monaco 使用的一些实用功能。&lt;/p&gt;</summary>
    
    
    
    
    <category term="工程实践" scheme="https://rob2468.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>2023年6月三亚之旅</title>
    <link href="https://rob2468.github.io/2023/06/21/travel-in-sanya/"/>
    <id>https://rob2468.github.io/2023/06/21/travel-in-sanya/</id>
    <published>2023-06-21T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.191Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;疫情结束有断时间了，想着要带家人出去玩一下。最近团队 outing 去三亚，便带了老婆孩子一起去。6月16日(周五)从上海出发，6月19日(周一)返回。&lt;/p&gt;</summary>
    
    
    
    
    <category term="生活" scheme="https://rob2468.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>置身事内-读书笔记</title>
    <link href="https://rob2468.github.io/2023/05/31/reading-notes-zhi-shen-shi-nei/"/>
    <id>https://rob2468.github.io/2023/05/31/reading-notes-zhi-shen-shi-nei/</id>
    <published>2023-05-31T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.191Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://media.githubusercontent.com/media/rob2468/rob2468.github.io/master/images/2023-05-31-%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85%E5%B0%81%E9%9D%A2.jpeg&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/35546622/&quot;&gt;置身事内-中国政府与经济发展&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;目录与前言&quot;&gt;&lt;a href=&quot;#目录与前言&quot; class=&quot;headerlink&quot; title=&quot;目录与前言&quot;&gt;&lt;/a&gt;目录与前言&lt;/h2&gt;&lt;p&gt;上篇 微观机制&lt;br&gt;第一章 地方政府的权力与事务&lt;br&gt;第二章 财税与政府行为&lt;br&gt;第三章 政府投融资与债务&lt;br&gt;第四章 工业化中的政府角色&lt;/p&gt;
&lt;p&gt;下篇 宏观现象&lt;br&gt;第五章 城市化与不平衡&lt;br&gt;第六章 债务与风险&lt;br&gt;第七章 国内国际失衡&lt;br&gt;第八章 总结：政府与经济发展&lt;/p&gt;
&lt;p&gt;本书以我国地方政府投融资为主线。&lt;/p&gt;
&lt;p&gt;发展经济是政府的核心任务，而招商引资需要调动各种资源和手段，所涉具体事务既深且广。了解招商引资，是理解地方政府深度融入经济发展过程的起点。&lt;/p&gt;</summary>
    
    
    
    
    <category term="读书笔记" scheme="https://rob2468.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Chrome Extensions 开发最佳实践</title>
    <link href="https://rob2468.github.io/2023/05/17/chrome-extensions-best-practice/"/>
    <id>https://rob2468.github.io/2023/05/17/chrome-extensions-best-practice/</id>
    <published>2023-05-17T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.191Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;阅读本文需要的基础知识：Chrome Extensions、webpack、React。&lt;/p&gt;</summary>
    
    
    
    
    <category term="webpack" scheme="https://rob2468.github.io/tags/webpack/"/>
    
    <category term="React" scheme="https://rob2468.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React 实现原理之异步渲染</title>
    <link href="https://rob2468.github.io/2023/02/16/understanding-react/"/>
    <id>https://rob2468.github.io/2023/02/16/understanding-react/</id>
    <published>2023-02-16T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.191Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;React 从 v16 开始逐步引入异步可中断的渲染架构。&lt;/p&gt;
&lt;p&gt;React 渲染过程可以分为三个阶段 Scheduling、Reconciliation、Commit。&lt;/p&gt;
&lt;p&gt;Scheduling 阶段执行任务调度，Reconciliation 阶段更新虚拟 DOM，本文主要讲述这两个阶段。(Commit 阶段更新 UI。e.g. 在浏览器环境中更新 DOM、在移动端环境中更新 Native 视图。)&lt;/p&gt;
&lt;p&gt;本文基于目前最新的 &lt;a href=&quot;https://github.com/facebook/react/tree/v18.2.0&quot;&gt;React v18.2.0&lt;/a&gt; 代码。&lt;/p&gt;</summary>
    
    
    
    
    <category term="React" scheme="https://rob2468.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>理解 JSX</title>
    <link href="https://rob2468.github.io/2023/02/09/understanding-jsx/"/>
    <id>https://rob2468.github.io/2023/02/09/understanding-jsx/</id>
    <published>2023-02-09T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.191Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;JSX-简介&quot;&gt;&lt;a href=&quot;#JSX-简介&quot; class=&quot;headerlink&quot; title=&quot;JSX 简介&quot;&gt;&lt;/a&gt;JSX 简介&lt;/h2&gt;&lt;p&gt;JSX 的介绍参考 React 官方文档 &lt;a href=&quot;https://zh-hans.reactjs.org/docs/introducing-jsx.html&quot;&gt;JSX 简介&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;JSX 编译后会转为名为 React.createElement 的函数调用。&lt;/p&gt;
&lt;h2 id=&quot;React-createElement-函数签名&quot;&gt;&lt;a href=&quot;#React-createElement-函数签名&quot; class=&quot;headerlink&quot; title=&quot;React.createElement 函数签名&quot;&gt;&lt;/a&gt;React.createElement 函数签名&lt;/h2&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;, props?: &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;, ...children: ReactNode[]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;createElement 函数接收三个参数。&lt;/p&gt;
&lt;p&gt;第一个参数为节点类型 type。比如，若在 JSX 中是 div，则 type 为 “div” 字符串；若在 JSX 中是自定义函数组件 CustomComponent，则 type 为 CustomComponent 函数。&lt;/p&gt;
&lt;p&gt;第二个参数为节点属性 props。比如，若 JSX 中声明 &lt;code&gt;&amp;lt;div className=&amp;quot;wrap&amp;quot;&amp;gt;&lt;/code&gt;，则 props 为 &lt;code&gt;&amp;#123; className: &amp;quot;wrap&amp;quot; &amp;#125;&lt;/code&gt;；若 JSX 中声明 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;，则 props 为 null。&lt;/p&gt;
&lt;p&gt;第三个参数为不定参数，每个参数值对应一个当前节点的子节点。&lt;/p&gt;</summary>
    
    
    
    
    <category term="React" scheme="https://rob2468.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>浏览器工作原理</title>
    <link href="https://rob2468.github.io/2023/01/17/how-browser-work/"/>
    <id>https://rob2468.github.io/2023/01/17/how-browser-work/</id>
    <published>2023-01-17T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.191Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;浏览器如何渲染页面&quot;&gt;&lt;a href=&quot;#浏览器如何渲染页面&quot; class=&quot;headerlink&quot; title=&quot;浏览器如何渲染页面&quot;&gt;&lt;/a&gt;浏览器如何渲染页面&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work&quot;&gt;Populating the page: how browsers work&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用户体验好的网页的标准：1、快速加载；2、交互流畅。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Web" scheme="https://rob2468.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>加密通信</title>
    <link href="https://rob2468.github.io/2023/01/12/encrypted-communication/"/>
    <id>https://rob2468.github.io/2023/01/12/encrypted-communication/</id>
    <published>2023-01-12T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.191Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;OSI-模型&quot;&gt;&lt;a href=&quot;#OSI-模型&quot; class=&quot;headerlink&quot; title=&quot;OSI 模型&quot;&gt;&lt;/a&gt;OSI 模型&lt;/h2&gt;&lt;p&gt;OSI将计算机网络体系结构划分为以下七层，标有1～7，第1层在底部。&lt;/p&gt;
&lt;h3 id=&quot;第7层-应用层&quot;&gt;&lt;a href=&quot;#第7层-应用层&quot; class=&quot;headerlink&quot; title=&quot;第7层 应用层&quot;&gt;&lt;/a&gt;第7层 应用层&lt;/h3&gt;&lt;p&gt;应用层（Application Layer）提供为应用软件而设计的接口，以设置与另一应用软件之间的通信。例如：HTTP、HTTPS、FTP、Telnet、SSH、SMTP、POP3等。&lt;/p&gt;
&lt;h3 id=&quot;第6层-表现层&quot;&gt;&lt;a href=&quot;#第6层-表现层&quot; class=&quot;headerlink&quot; title=&quot;第6层 表现层&quot;&gt;&lt;/a&gt;第6层 表现层&lt;/h3&gt;&lt;p&gt;表现层（Presentation Layer）把数据转换为能与接收者的系统格式兼容并适合传输的格式。&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络" scheme="https://rob2468.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>2022年国庆回家</title>
    <link href="https://rob2468.github.io/2022/10/06/national-day/"/>
    <id>https://rob2468.github.io/2022/10/06/national-day/</id>
    <published>2022-10-06T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.191Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;今年国庆提前请了两天假回老家，儿子终于实现了他的坐着高铁去旅行的梦想。&lt;/p&gt;
&lt;h2 id=&quot;儿子的行程&quot;&gt;&lt;a href=&quot;#儿子的行程&quot; class=&quot;headerlink&quot; title=&quot;儿子的行程&quot;&gt;&lt;/a&gt;儿子的行程&lt;/h2&gt;&lt;p&gt;儿子现在三岁半，越来越可爱，与亲戚朋友聚会时，无论什么时候都是焦点。这个国庆节他的行程最忙，先是坐高铁到盐城，第二天又被爷爷开车接到扬州，三天后爷爷又开车送回盐城，5号随我们坐高铁回到上海。在盐城和扬州还随着爷爷奶奶外公外婆到处走亲访友。&lt;/p&gt;
&lt;p&gt;儿子正处于快速学习说话的阶段，大人不经意说过的话也能记住，然后不知道在什么时候说出来，让我们惊叹不已。不过大人说的一些不好的话，他也会学着说，着实让人苦恼。&lt;/p&gt;</summary>
    
    
    
    
    <category term="生活" scheme="https://rob2468.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>高效篮球实战经验</title>
    <link href="https://rob2468.github.io/2022/08/03/efficient-basketball/"/>
    <id>https://rob2468.github.io/2022/08/03/efficient-basketball/</id>
    <published>2022-08-03T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.191Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;下面这些点是我在野球场的实战经验：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;投篮时手臂夹紧，保持持球手的小臂、大臂形成的平面与地面垂直</summary>
        
      
    
    
    
    
    <category term="生活" scheme="https://rob2468.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>字体</title>
    <link href="https://rob2468.github.io/2022/07/25/fonts/"/>
    <id>https://rob2468.github.io/2022/07/25/fonts/</id>
    <published>2022-07-25T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.190Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;CSS-font-face&quot;&gt;&lt;a href=&quot;#CSS-font-face&quot; class=&quot;headerlink&quot; title=&quot;CSS @font-face&quot;&gt;&lt;/a&gt;CSS @font-face&lt;/h2&gt;&lt;p&gt;一个字体家族可能包含多个字型。&lt;/p&gt;
&lt;p&gt;比如下图 Garamond 字体。第一个是正常的字型。第二个是将正常字型倾斜一定的角度，变成斜体字。第三个是真正的由字体设计师设计的 Garamond 斜体。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://media.githubusercontent.com/media/rob2468/rob2468.github.io/master/images/2022-07-25-garamondunstyled.jpeg&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://media.githubusercontent.com/media/rob2468/rob2468.github.io/master/images/2022-07-25-garamondartificialstyle.jpeg&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://media.githubusercontent.com/media/rob2468/rob2468.github.io/master/images/2022-07-25-garamonditalic.jpeg&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    
    <category term="CSS" scheme="https://rob2468.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>监听文件变化</title>
    <link href="https://rob2468.github.io/2022/07/18/cubetransdev/"/>
    <id>https://rob2468.github.io/2022/07/18/cubetransdev/</id>
    <published>2022-07-18T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.190Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;之前做了一个工具 CubeTrans，可以将 “Vue” 代码转译成了 React 代码，具体参考这篇文章 &lt;a href=&quot;/2022/06/27/vue-to-react-cubetrans/&quot; title=&quot;将 &amp;quot;Vue&amp;quot; 转译为 React&quot;&gt;将 &amp;quot;Vue&amp;quot; 转译为 React&lt;/a&gt;。为了让 CubeTrans 有用，又做了 CubeTransDev 工具，核心功能是实时监听文件变化。当监听到代码或 mock data 变化时，能够自动编译并实时预览。&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://rob2468.github.io/tags/JavaScript/"/>
    
    <category term="webpack" scheme="https://rob2468.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>将 &quot;Vue&quot; 转译为 React</title>
    <link href="https://rob2468.github.io/2022/06/27/vue-to-react-cubetrans/"/>
    <id>https://rob2468.github.io/2022/06/27/vue-to-react-cubetrans/</id>
    <published>2022-06-27T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.190Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本文记录了如何将 Vue 语言转译为 React 语言。主要目的是，当你面对此类源代码分析工作时，能够找到一些结构化处理的思路。&lt;/p&gt;
&lt;h2 id=&quot;background&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;标题中的 Vue 加上了引号，因为要转译的 Vue 代码不是包含了所有 Vue 语言特性的代码，而是 Vue 的一个子集。&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg4MDY0ODk0Ng==&amp;mid=2247483885&amp;idx=1&amp;sn=f3a6a1993bf7b867d9ecf421c454e5bf&amp;chksm=cf70b670f8073f66188329e479a37b4d8866686f98a2fc3a101d9ff8c972b835dd0eb453e785&amp;mpshare=1&amp;scene=1&amp;srcid=0627Aj7Dl7Gj79iaUf7aQ3CP&amp;sharer_sharetime=1656314563040&amp;sharer_shareid=e31ba76f7466506e9f6b0c0056037e45&amp;exportkey=AYxF2XQbEeP5I93T2nntDVI=&amp;acctmode=0&amp;pass_ticket=jGXWXRnxf1OTy8uzRI+uwUCe2k/z1/l5kervjNbaYHcrNHil38F7XZauvj7FMqy/&amp;wx_header=0#rd&quot;&gt;Cube 技术解读 | 支付宝新一代动态化技术架构与选型综述&lt;/a&gt; 这篇文章介绍了支付宝中使用的动态化框架，“对于Cube卡片，支持基于精简vue的card-dsl。”&lt;/p&gt;
&lt;p&gt;Cube 卡片是一种客户端技术，进行 Cube 卡片研发需要进行繁琐的开发环境配置，将 Vue 转译为 React 能够在浏览器中实时预览，提升研发效率。将精简的 Vue 语法转译为标准的 Vue 语法也能实现浏览器预览，但公司里的 H5 项目均采用 React 开发，转译为 React 能够在 H5 项目中复用已有的 Cube 卡片。&lt;/p&gt;
&lt;p&gt;暂将这个工具命名为 CubeTrans。&lt;/p&gt;</summary>
    
    
    
    
    <category term="AST" scheme="https://rob2468.github.io/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>养娃趣事</title>
    <link href="https://rob2468.github.io/2021/12/26/fun-facts-about-raising-a-baby/"/>
    <id>https://rob2468.github.io/2021/12/26/fun-facts-about-raising-a-baby/</id>
    <published>2021-12-26T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.190Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;&quot;&gt;&lt;/h1&gt;

&lt;h2&gt;2021-12-15&lt;/h2&gt;

&lt;p&gt;妈妈带着宝宝看“好饿的小蛇”这本书，用手指一个字一个字的指，教宝宝认字。&lt;/p&gt;</summary>
    
    
    
    
    <category term="生活" scheme="https://rob2468.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>耶鲁大学公开课:死亡-读后感</title>
    <link href="https://rob2468.github.io/2021/07/31/open-yale-courses-death/"/>
    <id>https://rob2468.github.io/2021/07/31/open-yale-courses-death/</id>
    <published>2021-07-31T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.190Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;&quot;&gt;&lt;/h1&gt;

&lt;h2 class=&quot;&quot;&gt;为什么要思考死亡&lt;/h2&gt;

&lt;p&gt;由于对死亡的认识所带来的反省，致使人类获得形而上学的见解，并由此得到一种慰藉。所有宗教和哲学体系，主要即为针对这种目的而发，以帮助人们培养反省的理性，作为对死亡观念的解毒剂。（叔本华）&lt;/p&gt;</summary>
    
    
    
    
    <category term="读书笔记" scheme="https://rob2468.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>儿子的想象力</title>
    <link href="https://rob2468.github.io/2021/07/11/jing-imagination/"/>
    <id>https://rob2468.github.io/2021/07/11/jing-imagination/</id>
    <published>2021-07-11T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.190Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;&quot;&gt;&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;在席子上尿了尿，看到形状，说像云朵。又好气，又好笑。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="生活" scheme="https://rob2468.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>简单问题、复杂问题、混沌问题</title>
    <link href="https://rob2468.github.io/2021/01/09/different-problems/"/>
    <id>https://rob2468.github.io/2021/01/09/different-problems/</id>
    <published>2021-01-09T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.190Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;&quot;&gt;&lt;/h1&gt;

&lt;p&gt;生活里需要解决各类问题，如果加以分类，可以分成简单问题、复杂问题、混沌问题三类。之前的领导，在跟我一次面对面的沟通中，提到了这种分类方式。感觉角度很有意思，并且细想起来，跟个人的体会也很相似。&lt;/p&gt;</summary>
    
    
    
    
    <category term="思考" scheme="https://rob2468.github.io/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>与儿子一起的睡前阅读</title>
    <link href="https://rob2468.github.io/2020/12/27/read-with-my-son/"/>
    <id>https://rob2468.github.io/2020/12/27/read-with-my-son/</id>
    <published>2020-12-27T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.190Z</updated>
    
    
    <summary type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;今天周末，白天加班，晚上回家吃晚饭。可能一天没见到爸爸，儿子晚上跟我特别亲，叫了好多声“爸爸”。吃晚饭时爬到我腿上讨吃的。睡觉前跑到书架前翻书看，我顺势把他抱到腿上，一起看起书来。小家伙安安静静的跟我待了好久。&lt;/p&gt;</summary>
    
    
    
    
    <category term="生活" scheme="https://rob2468.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>不同的销售</title>
    <link href="https://rob2468.github.io/2020/12/05/different-sales/"/>
    <id>https://rob2468.github.io/2020/12/05/different-sales/</id>
    <published>2020-12-05T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.190Z</updated>
    
    
    <summary type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;之前跟几个房产中介打过交道，房产中介就是做房屋销售的人。销售 A 从事二手房交易，是在附近的中介门面认识的，当时毕业不久，筹划购买住房。跟着销售 A 看了不少房子，交往了挺久。销售 A 人很好，工作认真负责，也有销售那种圆滑，永远不会让你感受到冒犯。其实我对房屋销售了解的不多，只能发表一些网上看到的简单观点，挺希望从销售身上学习更多的知识。但是销售 A 对于我发表的观点基本上全部表示赞同，甚至还会举出一些例子来证明我的观点，让人哭笑不得。&lt;/p&gt;</summary>
    
    
    
    
    <category term="思考" scheme="https://rob2468.github.io/tags/%E6%80%9D%E8%80%83/"/>
    
    <category term="观察" scheme="https://rob2468.github.io/tags/%E8%A7%82%E5%AF%9F/"/>
    
  </entry>
  
  <entry>
    <title>如何开发孩子的阅读潜力</title>
    <link href="https://rob2468.github.io/2020/08/08/child-reading/"/>
    <id>https://rob2468.github.io/2020/08/08/child-reading/</id>
    <published>2020-08-08T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.190Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;title&quot;&gt;&lt;/h1&gt;

&lt;p&gt;周育如·台湾清华大学幼教系主任, 得到 App&lt;/p&gt;</summary>
    
    
    
    
    <category term="读书笔记" scheme="https://rob2468.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>高效能人士的七个习惯，读书笔记</title>
    <link href="https://rob2468.github.io/2020/05/24/the-7-habits-of-highly-effectivce-people/"/>
    <id>https://rob2468.github.io/2020/05/24/the-7-habits-of-highly-effectivce-people/</id>
    <published>2020-05-24T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.190Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;title&quot;&gt;&lt;/h1&gt;

&lt;p&gt;作者 史蒂芬.科维&lt;/p&gt;
&lt;p&gt;得之太易必不受珍惜。唯有付出代价，万物始有价值。上苍深知如何为其产品制定合理的价格。&lt;/p&gt;</summary>
    
    
    
    
    <category term="读书笔记" scheme="https://rob2468.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用 xcodeproj 构建脚本</title>
    <link href="https://rob2468.github.io/2020/05/14/xcodeproj/"/>
    <id>https://rob2468.github.io/2020/05/14/xcodeproj/</id>
    <published>2020-05-14T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.190Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;&quot;&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/CocoaPods/Xcodeproj&quot; target=&quot;_blank&quot;&gt;xcodeproj&lt;/a&gt; 是 CocoaPods 的一个子项目，能够创建和修改 Xcode 工程。基于 xcodeproj 的能力编写脚本，可以完成许多 Xcode 工程配置的自动化工作。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://rob2468.github.io/tags/iOS/"/>
    
    <category term="工程实践" scheme="https://rob2468.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="xcodeproj" scheme="https://rob2468.github.io/tags/xcodeproj/"/>
    
  </entry>
  
  <entry>
    <title>HttpServerDebug 视图层级之数据结构设计</title>
    <link href="https://rob2468.github.io/2019/09/20/hsd-view-hierarchy-data-structure/"/>
    <id>https://rob2468.github.io/2019/09/20/hsd-view-hierarchy-data-structure/</id>
    <published>2019-09-20T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.190Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;title&quot;&gt;&lt;/h1&gt;

&lt;h2 id=&quot;section_1&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rob2468/HttpServerDebug&quot; target=&quot;_blank&quot;&gt;HSD（HttpServerDebug）&lt;/a&gt; 实现了类似 Xcode 中的视图调试功能，如下图所示。在 HSD 中，该功能的核心是视图数据，视图数据包括视图的层次、属性等。本文描述视图数据的组织方式。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://rob2468.github.io/tags/iOS/"/>
    
    <category term="工程实践" scheme="https://rob2468.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="HttpServerDebug" scheme="https://rob2468.github.io/tags/HttpServerDebug/"/>
    
  </entry>
  
  <entry>
    <title>指数基金基础知识</title>
    <link href="https://rob2468.github.io/2019/07/28/index-fund-investment-fundation/"/>
    <id>https://rob2468.github.io/2019/07/28/index-fund-investment-fundation/</id>
    <published>2019-07-28T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.190Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;title&quot;&gt;&lt;/h1&gt;

&lt;h2 id=&quot;section_1&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;投资是一项必备技能，平时通过蚂蚁财富等平台买了不少理财产品，零散之中也学到了一些指数基金的知识。公司最近发了一本书，由天弘指数基金研究小组出品的《指数基金/投资至简》，作为一名非专业人士，通过这本书学到了一些指数基金的知识。本文内容主要来自于这本书。&lt;/p&gt;</summary>
    
    
    
    
    <category term="读书笔记" scheme="https://rob2468.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>HSB 颜色系统实践入门（译）</title>
    <link href="https://rob2468.github.io/2019/07/06/hsb-practitioners-primer/"/>
    <id>https://rob2468.github.io/2019/07/06/hsb-practitioners-primer/</id>
    <published>2019-07-06T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.190Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;title&quot;&gt;&lt;/h1&gt;

&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;本文翻译自 &lt;a href=&quot;https://learnui.design/blog/the-hsb-color-system-practicioners-primer.html&quot; target=&quot;_blank&quot;&gt;The HSB Color System: A Practitioner’s Primer&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="翻译" scheme="https://rob2468.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
    <category term="读书笔记" scheme="https://rob2468.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>为 GCDWebServer 引入 WebSocket 支持</title>
    <link href="https://rob2468.github.io/2019/06/15/hsd-websocket/"/>
    <id>https://rob2468.github.io/2019/06/15/hsd-websocket/</id>
    <published>2019-06-15T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.190Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;title&quot;&gt;&lt;/h1&gt;

&lt;h2 id=&quot;section_1&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;借助一些工具库，iOS 设备可以配置成为服务器，在此之上可以做许多有意思的事情。例如，&lt;a href=&quot;https://github.com/rob2468/HttpServerDebug&quot; target=&quot;_blank&quot;&gt;HttpServerDebug&lt;/a&gt; 基于这种能力，提供了现场调试 iOS App 的能力。&lt;/p&gt;</summary>
    
    
    
    
    <category term="HttpServerDebug" scheme="https://rob2468.github.io/tags/HttpServerDebug/"/>
    
    <category term="WebSocket" scheme="https://rob2468.github.io/tags/WebSocket/"/>
    
    <category term="网络" scheme="https://rob2468.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Date 和时区</title>
    <link href="https://rob2468.github.io/2019/06/10/js-date-and-zone/"/>
    <id>https://rob2468.github.io/2019/06/10/js-date-and-zone/</id>
    <published>2019-06-10T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.190Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;title&quot;&gt;&lt;/h1&gt;

&lt;h2 id=&#39;section_1&#39;&gt;概述&lt;/h2&gt;

&lt;p&gt;JS 中使用 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot; target=&quot;_blank&quot;&gt;Date&lt;/a&gt; 类型记录时间。Date 类型是对时间的抽象封装，它提供了许多操作时间的便利方法。本文整理了如何使用 Date 来处理时间，以及解决时区转换带来的问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="工程实践" scheme="https://rob2468.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="JavaScript" scheme="https://rob2468.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ASCII 编码对照表</title>
    <link href="https://rob2468.github.io/2019/04/16/lookuptables/"/>
    <id>https://rob2468.github.io/2019/04/16/lookuptables/</id>
    <published>2019-04-16T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.189Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://media.githubusercontent.com/media/rob2468/rob2468.github.io/master/images/2019-04-16-asciifull.gif&quot;&gt;&lt;/p&gt;
&lt;h3</summary>
        
      
    
    
    
    
    <category term="资源" scheme="https://rob2468.github.io/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>CSS 知识</title>
    <link href="https://rob2468.github.io/2019/04/09/css-knowledge/"/>
    <id>https://rob2468.github.io/2019/04/09/css-knowledge/</id>
    <published>2019-04-09T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.189Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;选择器的特殊性&quot;&gt;&lt;a href=&quot;#选择器的特殊性&quot; class=&quot;headerlink&quot; title=&quot;选择器的特殊性&quot;&gt;&lt;/a&gt;选择器的特殊</summary>
        
      
    
    
    
    
    <category term="CSS" scheme="https://rob2468.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>博客评论系统的更新历程</title>
    <link href="https://rob2468.github.io/2019/03/30/blog-comment-system/"/>
    <id>https://rob2468.github.io/2019/03/30/blog-comment-system/</id>
    <published>2019-03-30T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.189Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;title&quot;&gt;&lt;/h1&gt;

&lt;p&gt;&lt;/p&gt;
这个博客站点使用 Github Pages 搭建，能够提供静态页面的展示，但是没有一套现成的评论系统。从前年开始，就一直在尝试各种方法增加评论功能，每次更新都是方案的重大改变。最终的实现还是使用传统方案，自建服务器，使用数据库存储。应该以后就会围绕这个方案完善下去，好在博客一直没啥人气，我可以慢慢折腾 ==。</summary>
    
    
    
    
    <category term="工程实践" scheme="https://rob2468.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>蚂蚁金服三个月</title>
    <link href="https://rob2468.github.io/2019/03/10/three-mothods-in-antfin/"/>
    <id>https://rob2468.github.io/2019/03/10/three-mothods-in-antfin/</id>
    <published>2019-03-10T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.189Z</updated>
    
    
    <summary type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;12月中旬离开百度加入蚂蚁金服。三个月时间转瞬即逝，马上就要提交试用期绩效评估，趁着这个时间自己也总结和梳理下最近的思考。&lt;/p&gt;</summary>
    
    
    
    
    <category term="思考" scheme="https://rob2468.github.io/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://rob2468.github.io/2019/01/12/design-pattern/"/>
    <id>https://rob2468.github.io/2019/01/12/design-pattern/</id>
    <published>2019-01-12T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.189Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;模型是在某情景（con</summary>
        
      
    
    
    
    
    <category term="设计模式" scheme="https://rob2468.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="MVC" scheme="https://rob2468.github.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 原型链和继承机制</title>
    <link href="https://rob2468.github.io/2018/11/21/javascript-prototype-chain/"/>
    <id>https://rob2468.github.io/2018/11/21/javascript-prototype-chain/</id>
    <published>2018-11-21T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.189Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;核心概念&quot;&gt;&lt;a href=&quot;#核心概念&quot; class=&quot;headerlink&quot; title=&quot;核心概念&quot;&gt;&lt;/a&gt;核心概念&lt;/h2&gt;&lt;p&gt;js </summary>
        
      
    
    
    
    
    <category term="JavaScript" scheme="https://rob2468.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>视图裁剪</title>
    <link href="https://rob2468.github.io/2018/10/12/clipped-content/"/>
    <id>https://rob2468.github.io/2018/10/12/clipped-content/</id>
    <published>2018-10-12T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.189Z</updated>
    
    
    <summary type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rob2468/HttpServerDebug&quot; target=&quot;_blank&quot;&gt;HttpServerDebug&lt;/a&gt; 实现了类似 Xcode Debug View Hierarchy 功能。客户端提供信息，前端绘制并提供交互能力，实现视图调试功能。&lt;/p&gt;
&lt;p&gt;视图调试其中一项功能是 Show Clipped Content，虽然不知道 Xcode 的实现方式，但是通过计算我们也可以拿到同样的信息。本文说明 HttpServerDebug 中的实现方案。&lt;/p&gt;</summary>
    
    
    
    
    <category term="HttpServerDebug" scheme="https://rob2468.github.io/tags/HttpServerDebug/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C Block</title>
    <link href="https://rob2468.github.io/2018/09/30/block/"/>
    <id>https://rob2468.github.io/2018/09/30/block/</id>
    <published>2018-09-30T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.189Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;title&quot;&gt;&lt;/h1&gt;

&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;本文内容主要来自 Pro Multithreading and Memory Management for iOS and OS X with ARC, Grand Central Dispatch, and Blocks 这本书，参考&lt;a href=&quot;/2016/12/29/reading-notes-pro-multithreading-and-memory-management-for-ios-and-osx-with-arc-grand-central-dispatch-and-blocks/&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Block 是语言级别的语法，是 C 语言的扩展。Block 可以解释为“包含了局部变量的匿名函数（anonymous functions together with automatic (local) variables）”。本文不多说 Block 的使用方法，着重讨论 Block 的实现机制。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://rob2468.github.io/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://rob2468.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>排序算法，伪代码实现</title>
    <link href="https://rob2468.github.io/2018/09/17/sort/"/>
    <id>https://rob2468.github.io/2018/09/17/sort/</id>
    <published>2018-09-17T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.189Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;title&quot;&gt;&lt;/h1&gt;

&lt;h2 id=&quot;section_1&quot;&gt;一、插入排序&lt;/h2&gt;

&lt;h3 id=&quot;section_1_1&quot;&gt;1. 直接插入排序&lt;/h3&gt;

&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 使用插入排序算法，将目标数组从小到大排列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param array  待排序的目标数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param n  数组长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InsertSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[], &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 遍历待排序元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tmp = &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (j = i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[j] &amp;gt; tmp; j--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 遍历已排序元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[j + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[j + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;时间复杂度 O(n^2)，空间复杂度 O(1)。直接插入排序是稳定的排序算法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://rob2468.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的遍历，伪代码实现</title>
    <link href="https://rob2468.github.io/2018/09/16/binary-tree-traverse/"/>
    <id>https://rob2468.github.io/2018/09/16/binary-tree-traverse/</id>
    <published>2018-09-16T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.189Z</updated>
    
    
    <summary type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *  二叉树链表存储，结点数据模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BiTreeNode&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BiTreeNode *lchild;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BiTreeNode *rchild;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://rob2468.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>管理的实践，读书笔记</title>
    <link href="https://rob2468.github.io/2018/08/26/the-practice-of-management-reading-notes/"/>
    <id>https://rob2468.github.io/2018/08/26/the-practice-of-management-reading-notes/</id>
    <published>2018-08-26T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.189Z</updated>
    
    
    <summary type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;花了好长时间才读完管理的实践这本书，不是因为内容无趣，而是因为必须专注的思考，才能体会德鲁克先生深刻的理念和见解。德鲁克先生的真知灼见和书中的系统论述，让我受益匪浅。&lt;/p&gt;</summary>
    
    
    
    
    <category term="读书笔记" scheme="https://rob2468.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>iOS 图像解码和最佳实践</title>
    <link href="https://rob2468.github.io/2018/08/22/image-and-graphics-best-practices/"/>
    <id>https://rob2468.github.io/2018/08/22/image-and-graphics-best-practices/</id>
    <published>2018-08-22T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.189Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;title&quot;&gt;&lt;/h1&gt;

&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;最近组内同事做了 iOS 图像解码的分享。针对不太清楚的问题，又做了些调研，梳理如下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://rob2468.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>如何选择开源许可证？（转）</title>
    <link href="https://rob2468.github.io/2018/06/27/how-to-choose-opensource-liscence/"/>
    <id>https://rob2468.github.io/2018/06/27/how-to-choose-opensource-liscence/</id>
    <published>2018-06-27T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.189Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;p&gt;原文链接，&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html&quot; target=&quot;_blank&quot;&gt;阮一峰的网络日志-如何选择开</summary>
        
      
    
    
    
    
    <category term="资源" scheme="https://rob2468.github.io/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>事件分发和 DOM 事件流（译）</title>
    <link href="https://rob2468.github.io/2018/06/19/event-dispatch-and-dom-event-flow-translation/"/>
    <id>https://rob2468.github.io/2018/06/19/event-dispatch-and-dom-event-flow-translation/</id>
    <published>2018-06-19T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.189Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;原文链接，&lt;a href=&quot;https://www.w3.org/TR/uievents/#event-flow&quot; target=&quot;_blank&quot;&gt;Event dispatch and DOM event flow&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文讲述事件分发机制和事件在 DOM 树上的传播行为。Web 应用使用 &lt;code&gt;dispatchEvent()&lt;/code&gt; 方法分发事件对象，事件对象遵循 DOM 事件流，在 DOM 树上传播。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Web" scheme="https://rob2468.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>如何在验证失败的情况下发布 Pod</title>
    <link href="https://rob2468.github.io/2018/05/12/pod-trunk-push-without-validation/"/>
    <id>https://rob2468.github.io/2018/05/12/pod-trunk-push-without-validation/</id>
    <published>2018-05-12T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.189Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 CocoaPods</summary>
        
      
    
    
    
    
    <category term="经验" scheme="https://rob2468.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>callMethodWithCompletionBlock 中 Block 的内存管理</title>
    <link href="https://rob2468.github.io/2018/02/08/callmethodwithcompletionblock-memory-speculating/"/>
    <id>https://rob2468.github.io/2018/02/08/callmethodwithcompletionblock-memory-speculating/</id>
    <published>2018-02-08T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.189Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;开发中不时会遇到 &lt;code&gt;[obj callMethodWithCompletionBlock:^&amp;#123; [obj doSomething] &amp;#125;]&lt;/code&gt; 这种写法。调用一个 OC 实例对象的带有 block 回调的方法，并且 block 实现又引用了该实例变量。写到这里经常会犹豫，要不要弱引用该实例变量，会不会造成循环引用。本文通过 Demo 演示了相关的几种情况，并对内存管理加以分析。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://rob2468.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>像素如何被绘制到屏幕上（译）</title>
    <link href="https://rob2468.github.io/2018/01/14/getting-pixels-onto-the-screen-translation/"/>
    <id>https://rob2468.github.io/2018/01/14/getting-pixels-onto-the-screen-translation/</id>
    <published>2018-01-14T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.188Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;title&quot;&gt;&lt;/h1&gt;

&lt;h2&gt;前言&lt;/h2&gt;
之前看到一篇很好的关于视图渲染的文章（&lt;a href=&quot;https://www.objc.io/issues/3-views/moving-pixels-onto-the-screen/?from=timeline&amp;isappinstalled=0&quot; target=&quot;_blank&quot;&gt;Getting Pixels onto the Screen&lt;/a&gt;），最近项目中遇到一些帧率优化的问题，想起来又阅读了一遍，并且抽时间进行了翻译，以便今后学习查阅。

&lt;h2&gt;正文&lt;/h2&gt;

&lt;p&gt;将内容显示到屏幕上，有许多方式可以实现。这个过程包含许多框架，依靠许多函数和方法的组合实现。本文讨论该过程的底层原理。当你需要考虑相关性能问题时，本文内容能够帮助挑选最优的 API。本文研究的对象是 iOS 系统，不过其中大部分内容也适用于 OS X。&lt;/p&gt;</summary>
    
    
    
    
    <category term="翻译" scheme="https://rob2468.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Git 回滚多次提交最佳实践</title>
    <link href="https://rob2468.github.io/2017/08/30/git-revert-multiple-commit-best-practice/"/>
    <id>https://rob2468.github.io/2017/08/30/git-revert-multiple-commit-best-practice/</id>
    <published>2017-08-30T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.188Z</updated>
    
    
    <summary type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;h2&gt;一、前言&lt;/h2&gt;

&lt;p&gt;在开发过程中有这么一种情况，某个特性开发的代码需要回滚，但是该特性的开发提交和所有即将上线的提交处于统一分支，此时需要将该特性相关的提交依次回滚。在回滚代码时希望满足两个要求，能够保留详细的回滚日志信息、只产生一次提交记录。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Git" scheme="https://rob2468.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>代码混淆</title>
    <link href="https://rob2468.github.io/2017/07/27/code-obfuscation/"/>
    <id>https://rob2468.github.io/2017/07/27/code-obfuscation/</id>
    <published>2017-07-27T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.188Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;title&quot;&gt;&lt;/h1&gt;

&lt;p&gt;class-dump 可以方便的导出 app 的类名和方法名，即使编译好的程序也能被第三方清晰看到编码信息。为了隐藏这些信息，可以对代码进行混淆，使得用如 class-dump 工具导出的类名和方法名变成毫无意义的乱码。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://rob2468.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>实现 GitHub Pages 的评论系统</title>
    <link href="https://rob2468.github.io/2017/04/18/commentme/"/>
    <id>https://rob2468.github.io/2017/04/18/commentme/</id>
    <published>2017-04-18T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.188Z</updated>
    
    
    <summary type="html">&lt;h1&gt;&lt;/h1&gt;

&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;2018-10-29 更新：&lt;/p&gt;
&lt;p&gt;最近买了个虚拟主机，可以简化前端工作，而且服务端使用命令行工具，也不会像前端实现这么复杂。旧的使用 GitHub API 方式的实现，可以访问&lt;br&gt;&lt;a href=&quot;https://github.com/rob2468/BlogServer/tree/v0.1&quot; target=&quot;_blank&quot;&gt;这个链接&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;本博客系统使用 GitHub Pages 服务。基本上所有文件为纯文本文件，使用 Git 执行版本控制并托管于 GitHub。GitHub Pages 在后台使用 &lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;_blank&quot;&gt;Jekyll&lt;/a&gt; 将当前提交内容编译成静态站点，实现网站发布。&lt;/p&gt;</summary>
    
    
    
    
    <category term="工程实践" scheme="https://rob2468.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="Git" scheme="https://rob2468.github.io/tags/Git/"/>
    
    <category term="GitHub" scheme="https://rob2468.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>ARC 内存管理和 GCD</title>
    <link href="https://rob2468.github.io/2016/12/29/reading-notes-pro-multithreading-and-memory-management-for-ios-and-osx-with-arc-grand-central-dispatch-and-blocks/"/>
    <id>https://rob2468.github.io/2016/12/29/reading-notes-pro-multithreading-and-memory-management-for-ios-and-osx-with-arc-grand-central-dispatch-and-blocks/</id>
    <published>2016-12-29T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.188Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;title&quot;&gt;&lt;/h1&gt;

&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;Pro Multithreading and Memory Management for iOS and OS X with ARC, Grand Central Dispatch, and Blocks 这本书篇幅不多，可分为如下3部分，共8个章节。&lt;/p&gt;
&lt;p&gt;内存管理基础知识：第一章、Life Before Automatic Reference Counting；第二章、ARC Rules；第三章、ARC Implementation。&lt;/p&gt;
&lt;p&gt;Block：第四章、Getting Started with Blocks；第五章、Blocks Implementation。&lt;/p&gt;
&lt;p&gt;GCD：第六章、Grand Central Dispatch；第七章、GCD Basics；第八章、GCD Implementation。&lt;/p&gt;
&lt;p&gt;本文为该本书的读书笔记，Block 相关的内容比较多，参考&lt;a href=&quot;/2018/09/30/block&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://rob2468.github.io/tags/iOS/"/>
    
    <category term="读书笔记" scheme="https://rob2468.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>UTI，Uniform Type Identifier</title>
    <link href="https://rob2468.github.io/2016/09/20/uti/"/>
    <id>https://rob2468.github.io/2016/09/20/uti/</id>
    <published>2016-09-20T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.188Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;文本文件可以使用文本编辑器打开，图片可以使用图片查看软件打开，这些操作都包含文件类型的判断。文件类型的表示方式很多，本文介绍的 UTI（Uniform Type Identifier）是 Apple 提出的一种表示文件类型的方法。其它的文件类型表示方法还有 OSType、文件名后缀、MIME 等。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://rob2468.github.io/tags/iOS/"/>
    
    <category term="资源" scheme="https://rob2468.github.io/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>可循环滚动的 ScrollView</title>
    <link href="https://rob2468.github.io/2016/05/26/cycle-scroll-view/"/>
    <id>https://rob2468.github.io/2016/05/26/cycle-scroll-view/</id>
    <published>2016-05-26T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.188Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;代码：&lt;a href=&quot;https://github.com/rob2468/CycleScrollView&quot;&gt;CycleScrollView&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上述代码实现可循环滚动的 ScrollView。具体需求有如下2点：&lt;/p&gt;
&lt;p&gt;1、支持分页滚动；&lt;/p&gt;
&lt;p&gt;2、支持循环滚动。&lt;/p&gt;
&lt;p&gt;实现参考了网上搜到的一些方案，经过几次优化，形成最终的版本。许多实现存在一些缺陷，比如，快速滑动时会卡住，等 ScrollView 停止滑动后再滑动就可以了。最初的版本也存在这个问题，因为布局调整是在 scrollViewDidEndDecelerating 中实现的，快速滑动时不会调用到该方法中。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://rob2468.github.io/tags/iOS/"/>
    
    <category term="工程实践" scheme="https://rob2468.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>初试项目管理，个人经验小结</title>
    <link href="https://rob2468.github.io/2016/05/20/project-management-summary/"/>
    <id>https://rob2468.github.io/2016/05/20/project-management-summary/</id>
    <published>2016-05-20T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.188Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;加入百度时间不长，一直参与百度浏览器 iPhone 版的开发。开发组里每位同事会轮流负责新版本的管理工作，在试用期转正的1个月后，我承担了一次重大更新版本的项目管理工作。&lt;/p&gt;
&lt;p&gt;这次重大更新版本从进入开发到 App Store 发布，将近2个月时间。本文是对这段经历的总结，包括管理经验、个人感受、个人思考。&lt;/p&gt;</summary>
    
    
    
    
    <category term="思考" scheme="https://rob2468.github.io/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 消息传递</title>
    <link href="https://rob2468.github.io/2016/05/17/objc-message-send/"/>
    <id>https://rob2468.github.io/2016/05/17/objc-message-send/</id>
    <published>2016-05-17T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.188Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;OC 为动态运行时语言，其将许多决策从编译和链接时延迟到运行时执行。OC 中的方法调用本质为消息传递，[receiver message] 可以解释为向 receiver 对象发送 message 消息。今天阅读了 Apple 开发文档的 &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html#//apple_ref/doc/uid/TP40008048-CH104-SW1]&quot;&gt;Messaging 章节&lt;/a&gt;，利用运行时系统提供的相关方法，OC 消息传递式的方法调用最终转换成了标准 C 语言函数调用方式，实现了统一。&lt;/p&gt;
&lt;p&gt;本文以 Apple 开发文档为基础，讲述 OC 以消息传递方式实现方法调用的执行流程。第一节介绍执行消息解析的函数；第二节讲述消息解析过程中，消息对应的方法实现是如何寻找的；第三节讲述方法实现找到后，如何执行。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://rob2468.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>JSPatch 代码分析</title>
    <link href="https://rob2468.github.io/2016/05/16/jspatch-code-analysis/"/>
    <id>https://rob2468.github.io/2016/05/16/jspatch-code-analysis/</id>
    <published>2016-05-16T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.188Z</updated>
    
    
    <summary type="html">&lt;h1 class=&quot;title&quot;&gt;&lt;/h1&gt;

&lt;p&gt;“&lt;a href=&quot;https://github.com/bang590/JSPatch&quot;&gt;JSPatch&lt;/a&gt; 是一个 iOS 动态更新框架，只需在项目中引入极小的引擎，就可以使用 JavaScript 调用任何 Objective-C 原生接口，获得脚本语言的优势：为项目动态添加模块，或替换项目原生代码动态修复 bug。”&lt;/p&gt;
&lt;p&gt;JSPatch 的实现原理可参考原作者(bang590)的相关文章。本文给出 JSPatch 部分代码分析纪录。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://rob2468.github.io/tags/iOS/"/>
    
    <category term="动态化" scheme="https://rob2468.github.io/tags/%E5%8A%A8%E6%80%81%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>图片查看器中单张图片浏览的实现与优化</title>
    <link href="https://rob2468.github.io/2016/01/16/image-browser-implementation-and-optimization/"/>
    <id>https://rob2468.github.io/2016/01/16/image-browser-implementation-and-optimization/</id>
    <published>2016-01-16T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.188Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h2&gt;&lt;p&gt;百度浏览器3.1版本引入了图片查看器。我在3.2版本接手该模块，并修改与优化。百度浏览器中的图片查看器效果和微信中查看本人已发布照片调起的图片查看器功能类似。百度浏览器中许多模块能够调起图片查看器，如下载页面、趣星球、网页，以提供用户一致的图片浏览体验。&lt;/p&gt;
&lt;p&gt;图片查看器的整体设计不必多说。在图片查看器中浏览单张图片时，为了实现最优的浏览体验，自己花了不少时间调试。本文对该部分功能中的知识和经验做记录。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://rob2468.github.io/tags/iOS/"/>
    
    <category term="工程实践" scheme="https://rob2468.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>Head Tab View</title>
    <link href="https://rob2468.github.io/2015/11/02/bdphoneheadtabview/"/>
    <id>https://rob2468.github.io/2015/11/02/bdphoneheadtabview/</id>
    <published>2015-11-02T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.188Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;源代码：&lt;a href=&quot;https://github.com/rob2468/HeadTabView&quot;&gt;BDPhoneHeadTabView&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://rob2468.github.io/tags/iOS/"/>
    
    <category term="工程实践" scheme="https://rob2468.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>在 UIScrollView 中使用 Autolayout</title>
    <link href="https://rob2468.github.io/2015/10/26/autolayout-in-uiscrollView/"/>
    <id>https://rob2468.github.io/2015/10/26/autolayout-in-uiscrollView/</id>
    <published>2015-10-26T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.188Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;通过为控件设定约束，Autolayout 能够实现控件布局的自适应。当 app 运行时，iOS 根据预先设定的约束布局界面元素。&lt;/p&gt;
&lt;p&gt;以约束的方式为控件 A 设定布局，控件 A 的实际布局数据是通过约束的依赖关系计算出来的。比如，控件 A 的 leading 始终和控件 B 的 trailing 相等，则控件 A 的 leading 数据依赖于控件 B 的 trailing 数据。&lt;/p&gt;
&lt;h2 id=&quot;一、问题&quot;&gt;&lt;a href=&quot;#一、问题&quot; class=&quot;headerlink&quot; title=&quot;一、问题&quot;&gt;&lt;/a&gt;一、问题&lt;/h2&gt;&lt;p&gt;当在 UIScrollView 中采用 Autolayout 方式布局时，情况变得有些复杂。UIScrollView 的 contentSize 依赖于其子视图的布局，而其子视图的布局依赖于 UIScrollView 的 contentSize。如图1所示。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://rob2468.github.io/tags/iOS/"/>
    
    <category term="工程实践" scheme="https://rob2468.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>iOS App 在不同状态下收到 push 通知的行为</title>
    <link href="https://rob2468.github.io/2015/08/14/app-behavior-after-receiving-push/"/>
    <id>https://rob2468.github.io/2015/08/14/app-behavior-after-receiving-push/</id>
    <published>2015-08-14T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.188Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;iOS App有多种运行状态，并且可能在任一状态下接收到APNS (Apple Push Notification Service)发送来的push通知；针对一条push通知，用户可能采取不同动作。&lt;/p&gt;
&lt;p&gt;为了合理的处理push通知，需要开发者在合适的地方提供处理代码。通过测试，本文总结出iOS App在不同状态下接收到push通知的行为。本文只是简单的总结处理push通知的时机，针对更加复杂的push功能未做调研。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://rob2468.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>UML 中类及其关系的符号表示</title>
    <link href="https://rob2468.github.io/2015/05/24/symbol-representation-of-uml-class-diagram/"/>
    <id>https://rob2468.github.io/2015/05/24/symbol-representation-of-uml-class-diagram/</id>
    <published>2015-05-24T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.187Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;在软件开发过程中，UML类图经常被用来描述工程中的类与类和类之间的关系。在UML中，类及其之间的关系有标准的符号表示，方便开发者表达和理解</summary>
        
      
    
    
    
    
    <category term="UML" scheme="https://rob2468.github.io/tags/UML/"/>
    
    <category term="资源" scheme="https://rob2468.github.io/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>视图控制对象的视图的生命周期</title>
    <link href="https://rob2468.github.io/2015/04/15/lifecycle-of-view-of-viewcontroller/"/>
    <id>https://rob2468.github.io/2015/04/15/lifecycle-of-view-of-viewcontroller/</id>
    <published>2015-04-15T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.187Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;《iOS编程（第三版）》“图7-20 某个视图控制对象的视图的生命周期”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.githubuser</summary>
        
      
    
    
    
    
    <category term="iOS" scheme="https://rob2468.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 工程默认源代码文件简介（译）</title>
    <link href="https://rob2468.github.io/2015/04/11/review-the-default-ios-source-code/"/>
    <id>https://rob2468.github.io/2015/04/11/review-the-default-ios-source-code/</id>
    <published>2015-04-11T00:00:00.000Z</published>
    <updated>2025-10-07T17:26:37.187Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;翻译自 Apple iOS developer library&lt;/p&gt;
&lt;h2 id=&quot;源代码简介&quot;&gt;&lt;a href=&quot;#源代码简介&quot; class=&quot;headerlink&quot; title=&quot;源代码简介&quot;&gt;&lt;/a&gt;源代码简介&lt;/h2&gt;&lt;p&gt;app 工程创建后通常会自动生成一些源代码文件，通过这些源代码文件构建 app。其中大部分的工作是由 &lt;code&gt;UIApplicationMain&lt;/code&gt; 函数完成的，&lt;code&gt;UIApplicationMain&lt;/code&gt; 函数在 &lt;code&gt;main.m&lt;/code&gt; 文件中自动被调用。&lt;code&gt;UIApplicationMain&lt;/code&gt; 函数创建一个应用程序对象，该应用程序对象为 app 创建与 iOS 操作系统协同工作的基础设施环境，包括创建一个向 app 分发输入事件的 &lt;em&gt;run loop&lt;/em&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://rob2468.github.io/tags/iOS/"/>
    
    <category term="翻译" scheme="https://rob2468.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
</feed>
